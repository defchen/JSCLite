apply plugin: 'com.android.application'

def projRoot = '../../../..'
def prepackagedLibsDir = projRoot + '/build/Android.prepackaged-libs'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId 'com.example.native_shell'
        minSdkVersion  9
        targetSdkVersion 23
        ndk {
            //abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            abiFilters 'armeabi'
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-9',
                '-DANDROID_TOOLCHAIN=clang'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
            'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = [prepackagedLibsDir]
        }
    }
}

// prepackaging the native libraries is just a normal build of JSCLite
task prepackageLibs << {
    if (!file(prepackagedLibsDir + '/armeabi/libjs.so').exists()) {
        exec {
            workingDir(projRoot)
            executable 'make'
            args = ['android']
        }
    }
}

// ensure we build JSCLite before building
gradle.projectsEvaluated {
    preBuild.dependsOn(prepackageLibs)
}
